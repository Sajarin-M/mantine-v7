(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2893],{20799:function(o,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/combobox",function(){return e(37035)}])},37035:function(o,n,e){"use strict";e.r(n),e.d(n,{default:function(){return o6}});let t=[{id:"BasicSelect",name:"Basic select",description:"Primitive select component",type:"select"},{id:"SelectActive",name:"Select with active option",description:"Active option is marked in the dropdown",type:"select"},{id:"SearchableSelect",name:"Searchable select",description:"Select with search",type:"select"},{id:"SelectLimit",name:"Select with options limit",description:"100 000 options searchable select",fullDescription:"Limiting the number of options rendered at a time is the most efficient way to deal with large data sets. The example below shows how to use the limit prop to only render 7 options at a time while performing a search in a data set of 100,000 options.",type:"select"},{id:"SelectOptionComponent",name:"Select with custom option",description:"Select with custom option and value component",type:"select"},{id:"SelectAsync",name:"Select with async data",description:"Data is requested only when the dropdown is opened",type:"select"},{id:"SelectClearable",name:"Select with clear button",description:"Clearable select",type:"select"},{id:"SelectDropdownSearch",name:"Select with search in dropdown",description:"Select with search input in the dropdown",type:"select"},{id:"SelectOptionOnHover",name:"Select option on hover",description:"Move selection to hovered option",fullDescription:"Moving selection to hovered option can be useful when you want to combine mouse and keyboard interactions.",type:"select"},{id:"BasicAutocomplete",name:"Basic autocomplete",description:"Primitive autocomplete component",type:"autocomplete"},{id:"AutocompleteLimit",name:"Autocomplete with options limit",description:"100 000 options search",fullDescription:"Limiting the number of options rendered at a time is the most efficient way to deal with large data sets. The example below shows how to use the limit prop to only render 7 options at a time while performing a search in a data set of 100,000 options.",type:"autocomplete"},{id:"AsyncAutocomplete",name:"Async autocomplete",description:"Autocomplete with async data",type:"autocomplete"},{id:"AutocompleteHighlight",name:"Autocomplete with highlight",description:"Autocomplete with highlighted search query in options",type:"autocomplete"},{id:"AutocompleteSelectFirstOption",name:"Select first option on type",description:"Autocomplete with first option selected when user types",type:"autocomplete"},{id:"AutocompleteDynamic",name:"Dynamic options",description:"Autocomplete with options that depend on the user input",type:"autocomplete"},{id:"AutocompleteClearable",name:"Clearable autocomplete",description:"Autocomplete with clear button",type:"autocomplete"},{id:"BasicButton",name:"Basic button",description:"Primitive combobox with button target",type:"button"},{id:"ButtonSearch",name:"Button with search in dropdown",description:"Button with search input in the dropdown",type:"button"},{id:"DropdownScroll",name:"Dropdown scroll",description:"Dropdown with native scrollbars",type:"dropdown"},{id:"DropdownScrollArea",name:"Dropdown with ScrollArea",description:"Dropdown with ScrollArea.Autosize scrollbars",type:"dropdown"},{id:"DropdownHeader",name:"Dropdown with header",description:"Dropdown with ScrollArea and header",type:"dropdown"},{id:"DropdownFooter",name:"Dropdown with footer",description:"Dropdown with ScrollArea and footer",type:"dropdown"},{id:"DropdownPositionStyles",name:"Dropdown with custom styles",description:"Change dropdown styles with Styles API",type:"dropdown"},{id:"SelectedStyles",name:"Custom selected styles",description:"Customize selected option styles",type:"dropdown"},{id:"DropdownAnimation",name:"Dropdown animation",description:"Dropdown with open/close animation",type:"animations"},{id:"DropdownOptionsAnimation",name:"Dropdown with option animation",description:"Play options animation on dropdown open",type:"animations"},{id:"SelectedAnimation",name:"Animate selected option",description:"Play options animation on when option is selected",type:"animations"}];var r=e(85893),i=e(67294),s=e(14437),l=e(24431),a=e(39213),c=e(51499);let u=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var p=e(31577);let m=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],b=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],d=Array(1e5).fill(0).map((o,n)=>"Item ".concat(n));var h=e(99146);let x=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var C=e(58051);let D=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var g=e(74378),w=e(17723);let v=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var S=e(77048);let O=[{emoji:"\uD83C\uDF4E",value:"Apples",description:"Crisp and refreshing fruit"},{emoji:"\uD83C\uDF4C",value:"Bananas",description:"Naturally sweet and potassium-rich fruit"},{emoji:"\uD83E\uDD66",value:"Broccoli",description:"Nutrient-packed green vegetable"},{emoji:"\uD83E\uDD55",value:"Carrots",description:"Crunchy and vitamin-rich root vegetable"},{emoji:"\uD83C\uDF6B",value:"Chocolate",description:"Indulgent and decadent treat"}];function f(o){let{emoji:n,value:e,description:t}=o;return(0,r.jsxs)(g.Z,{children:[(0,r.jsx)(S.x,{fz:20,children:n}),(0,r.jsxs)("div",{children:[(0,r.jsx)(S.x,{fz:"sm",fw:500,children:e}),(0,r.jsx)(S.x,{fz:"xs",opacity:.6,children:t})]})]})}let y=Array(1e5).fill(0).map((o,n)=>"Item ".concat(n)),j=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],B=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var F=e(75675);let E=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],k=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var P=e(45906);let A=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"],T=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var I=e(22465),N=e.n(I);let _=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],L=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var V=e(43406),z=e(94873);let M=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],G=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var K=e(86010),H=e(35056),J=e.n(H);let R=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],q=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var Q=e(19416),Z=e.n(Q);let Y=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var $=e(46342);let X=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"],W=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var U=e(95296),oo=e.n(U);let on=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"],oe=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var ot=JSON.parse('[{"fileName":"BasicSelect.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function BasicSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),or=JSON.parse("[{\"fileName\":\"BasicAutocomplete.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function BasicAutocomplete() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oi=JSON.parse("[{\"fileName\":\"SearchableSelect.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SearchableSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState('');\\n\\n  const shouldFilterOptions = groceries.every((item) => item !== search);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        setSearch(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || '');\\n          }}\\n          placeholder=\\\"Search value\\\"\\n          rightSectionPointerEvents=\\\"none\\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),os=JSON.parse('[{"fileName":"AutocompleteLimit.tsx","language":"tsx","code":"\\nimport { Combobox, TextInput, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = Array(100000)\\n  .fill(0)\\n  .map((_, index) => `Item ${index}`);\\n\\nfunction getFilteredOptions(data: string[], searchQuery: string, limit: number) {\\n  const result: string[] = [];\\n\\n  for (let i = 0; i < data.length; i += 1) {\\n    if (result.length === limit) {\\n      break;\\n    }\\n\\n    if (data[i].toLowerCase().includes(searchQuery.trim().toLowerCase())) {\\n      result.push(data[i]);\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nexport function AutocompleteLimit() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState(\'\');\\n  const filteredOptions = getFilteredOptions(MOCKDATA, value, 7);\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\"Pick value or type anything\\"\\n          placeholder=\\"Pick value or type anything\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),ol=JSON.parse("[{\"fileName\":\"AsyncAutocomplete.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, Loader, useCombobox } from '@mantine/core';\\n\\nconst MOCKDATA = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nfunction getAsyncData(searchQuery: string, signal: AbortSignal) {\\n  return new Promise<string[]>((resolve, reject) => {\\n    signal.addEventListener('abort', () => {\\n      reject(new Error('Request aborted'));\\n    });\\n\\n    setTimeout(() => {\\n      resolve(\\n        MOCKDATA.filter((item) => item.toLowerCase().includes(searchQuery.toLowerCase())).slice(\\n          0,\\n          5\\n        )\\n      );\\n    }, Math.random() * 1000);\\n  });\\n}\\n\\nexport function AsyncAutocomplete() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [loading, setLoading] = useState(false);\\n  const [data, setData] = useState<string[] | null>(null);\\n  const [value, setValue] = useState('');\\n  const [empty, setEmpty] = useState(false);\\n  const abortController = useRef<AbortController>();\\n\\n  const fetchOptions = (query: string) => {\\n    abortController.current?.abort();\\n    abortController.current = new AbortController();\\n    setLoading(true);\\n\\n    getAsyncData(query, abortController.current.signal)\\n      .then((result) => {\\n        setData(result);\\n        setLoading(false);\\n        setEmpty(result.length === 0);\\n        abortController.current = undefined;\\n      })\\n      .catch(() => {});\\n  };\\n\\n  const options = (data || []).map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Search groceries\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            fetchOptions(event.currentTarget.value);\\n            combobox.resetSelectedOption();\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => {\\n            combobox.openDropdown();\\n            if (data === null) {\\n              fetchOptions(value);\\n            }\\n          }}\\n          onBlur={() => combobox.closeDropdown()}\\n          rightSection={loading && <Loader size={18} />}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown hidden={data === null}>\\n        <Combobox.Options>\\n          {options}\\n          {empty && <Combobox.Empty>No results found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oa=JSON.parse('[{"fileName":"AutocompleteHighlight.tsx","language":"tsx","code":"\\nimport { Combobox, Highlight, TextInput, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function AutocompleteHighlight() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n  const [value, setValue] = useState(\'\');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      <Highlight highlight={value} size=\\"sm\\">\\n        {item}\\n      </Highlight>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\"Pick value or type anything\\"\\n          placeholder=\\"Pick value or type anything\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.updateSelectedOptionIndex();\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),oc=JSON.parse("[{\"fileName\":\"SelectActive.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, Input, Group, CheckIcon, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectActive() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: (eventSource) => {\\n      if (eventSource === 'keyboard') {\\n        combobox.selectActiveOption();\\n      } else {\\n        combobox.updateSelectedOptionIndex('active');\\n      }\\n    },\\n  });\\n\\n  const [value, setValue] = useState<string | null>('\uD83E\uDD66 Broccoli');\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} active={item === value}>\\n      <Group gap=\\\"xs\\\">\\n        {item === value && <CheckIcon size={12} />}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      resetSelectionOnOptionHover\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.updateSelectedOptionIndex('active');\\n      }}\\n    >\\n      <Combobox.Target targetType=\\\"button\\\">\\n        <InputBase\\n          component=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),ou=JSON.parse("[{\"fileName\":\"SelectOptionComponent.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, Input, useCombobox, Group, Text } from '@mantine/core';\\n\\ninterface Item {\\n  emoji: string;\\n  value: string;\\n  description: string;\\n}\\n\\nconst groceries: Item[] = [\\n  { emoji: '\uD83C\uDF4E', value: 'Apples', description: 'Crisp and refreshing fruit' },\\n  { emoji: '\uD83C\uDF4C', value: 'Bananas', description: 'Naturally sweet and potassium-rich fruit' },\\n  { emoji: '\uD83E\uDD66', value: 'Broccoli', description: 'Nutrient-packed green vegetable' },\\n  { emoji: '\uD83E\uDD55', value: 'Carrots', description: 'Crunchy and vitamin-rich root vegetable' },\\n  { emoji: '\uD83C\uDF6B', value: 'Chocolate', description: 'Indulgent and decadent treat' },\\n];\\n\\nfunction SelectOption({ emoji, value, description }: Item) {\\n  return (\\n    <Group>\\n      <Text fz={20}>{emoji}</Text>\\n      <div>\\n        <Text fz=\\\"sm\\\" fw={500}>\\n          {value}\\n        </Text>\\n        <Text fz=\\\"xs\\\" opacity={0.6}>\\n          {description}\\n        </Text>\\n      </div>\\n    </Group>\\n  );\\n}\\n\\nexport function SelectOptionComponent() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const selectedOption = groceries.find((item) => item.value === value);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item.value} key={item.value}>\\n      <SelectOption {...item} />\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n          multiline\\n        >\\n          {selectedOption ? (\\n            <SelectOption {...selectedOption} />\\n          ) : (\\n            <Input.Placeholder>Pick value</Input.Placeholder>\\n          )}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),op=JSON.parse('[{"fileName":"SelectLimit.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = Array(100000)\\n  .fill(0)\\n  .map((_, index) => `Item ${index}`);\\n\\nfunction getFilteredOptions(data: string[], searchQuery: string, limit: number) {\\n  const result: string[] = [];\\n\\n  for (let i = 0; i < data.length; i += 1) {\\n    if (result.length === limit) {\\n      break;\\n    }\\n\\n    if (data[i].toLowerCase().includes(searchQuery.trim().toLowerCase())) {\\n      result.push(data[i]);\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nexport function SelectLimit() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState(\'\');\\n\\n  const filteredOptions = getFilteredOptions(MOCKDATA, search, 7);\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        setSearch(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || \'\');\\n          }}\\n          placeholder=\\"Search value\\"\\n          rightSectionPointerEvents=\\"none\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),om=JSON.parse('[{"fileName":"SelectAsync.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, Loader, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nfunction getAsyncData() {\\n  return new Promise<string[]>((resolve) => {\\n    setTimeout(() => resolve(MOCKDATA), 2000);\\n  });\\n}\\n\\nexport function SelectAsync() {\\n  const [value, setValue] = useState<string | null>(null);\\n  const [loading, setLoading] = useState(false);\\n  const [data, setData] = useState<string[]>([]);\\n\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => {\\n      if (data.length === 0 && !loading) {\\n        setLoading(true);\\n        getAsyncData().then((response) => {\\n          setData(response);\\n          setLoading(false);\\n          combobox.resetSelectedOption();\\n        });\\n      }\\n    },\\n  });\\n\\n  const options = data.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={loading ? <Loader size={18} /> : <Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {loading ? <Combobox.Empty>Loading....</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),ob=JSON.parse("[{\"fileName\":\"AutocompleteSelectFirstOption.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function AutocompleteSelectFirstOption() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  useEffect(() => {\\n    // we need to wait for options to render before we can select first one\\n    combobox.selectFirstOption();\\n  }, [value]);\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),od=JSON.parse("[{\"fileName\":\"SelectClearable.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, Input, CloseButton, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectClearable() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          pointer\\n          rightSection={\\n            value !== null ? (\\n              <CloseButton\\n                size=\\\"sm\\\"\\n                onMouseDown={(event) => event.preventDefault()}\\n                onClick={() => setValue(null)}\\n                aria-label=\\\"Clear value\\\"\\n              />\\n            ) : (\\n              <Combobox.Chevron />\\n            )\\n          }\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents={value === null ? 'none' : 'all'}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oh=JSON.parse("[{\"fileName\":\"DropdownScroll.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownScroll() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options mah={200} style={{ overflowY: 'auto' }}>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),ox=JSON.parse("[{\"fileName\":\"DropdownScrollArea.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, ScrollArea, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownScrollArea() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oC=JSON.parse('[{"fileName":"AutocompleteDynamic.tsx","language":"tsx","code":"\\nimport { Combobox, TextInput, useCombobox } from \'@mantine/core\';\\n\\nexport function AutocompleteDynamic() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState(\'\');\\n\\n  const options = [\'gmail.com\', \'outlook.com\', \'mantine.dev\'].map((item) => (\\n    <Combobox.Option value={`${value}@${item}`} key={item}>\\n      {`${value}@${item}`}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\"Your email\\"\\n          placeholder=\\"Your email\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown hidden={value.trim().length === 0 || value.includes(\'@\')}>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),oD=JSON.parse("[{\"fileName\":\"DropdownAnimation.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, Input, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function DropdownAnimation() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      transitionProps={{ duration: 200, transition: 'pop' }}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),og=JSON.parse('[{"fileName":"DropdownPositionStyles.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\nimport classes from \'./DropdownPositionStyles.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function DropdownPositionStyles() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      offset={0}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n          classNames={{ input: classes.input }}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown className={classes.dropdown}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"DropdownPositionStyles.module.css","language":"css","code":".dropdown {\\n  border-top: 0;\\n  border-top-right-radius: 0;\\n  border-top-left-radius: 0;\\n  border-color: light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-4));\\n}\\n\\n.input {\\n  &[data-expanded] {\\n    border-bottom-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n  }\\n}\\n"}]'),ow=JSON.parse("[{\"fileName\":\"SelectDropdownSearch.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, InputBase, Input, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectDropdownSearch() {\\n  const [search, setSearch] = useState('');\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      combobox.focusTarget();\\n      setSearch('');\\n    },\\n\\n    onDropdownOpen: () => {\\n      combobox.focusSearchInput();\\n    },\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Search\\n          value={search}\\n          onChange={(event) => setSearch(event.currentTarget.value)}\\n          placeholder=\\\"Search groceries\\\"\\n        />\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),ov=JSON.parse('[{"fileName":"BasicButton.tsx","language":"tsx","code":"\\nimport { useCombobox, Combobox, Text, Button, Box } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function BasicButton() {\\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <>\\n      <Combobox\\n        store={combobox}\\n        width={250}\\n        position=\\"bottom-start\\"\\n        withArrow\\n        onOptionSelect={(val) => {\\n          setSelectedItem(val);\\n          combobox.closeDropdown();\\n        }}\\n      >\\n        <Combobox.Target>\\n          <Button onClick={() => combobox.toggleDropdown()}>Pick item</Button>\\n        </Combobox.Target>\\n\\n        <Combobox.Dropdown>\\n          <Combobox.Options>{options}</Combobox.Options>\\n        </Combobox.Dropdown>\\n      </Combobox>\\n\\n      <Box mt=\\"xs\\">\\n        <Text span size=\\"sm\\" c=\\"dimmed\\">\\n          Selected item:{\' \'}\\n        </Text>\\n\\n        <Text span size=\\"sm\\">\\n          {selectedItem || \'Nothing selected\'}\\n        </Text>\\n      </Box>\\n    </>\\n  );\\n}\\n"}]'),oS=JSON.parse('[{"fileName":"ButtonSearch.tsx","language":"tsx","code":"\\nimport { useCombobox, Combobox, Text, Button, Box } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function ButtonSearch() {\\n  const [search, setSearch] = useState(\'\');\\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      combobox.focusTarget();\\n      setSearch(\'\');\\n    },\\n\\n    onDropdownOpen: () => {\\n      combobox.focusSearchInput();\\n    },\\n  });\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <>\\n      <Combobox\\n        store={combobox}\\n        width={250}\\n        position=\\"bottom-start\\"\\n        withArrow\\n        onOptionSelect={(val) => {\\n          setSelectedItem(val);\\n          combobox.closeDropdown();\\n        }}\\n      >\\n        <Combobox.Target withAriaAttributes={false}>\\n          <Button onClick={() => combobox.toggleDropdown()}>Pick item</Button>\\n        </Combobox.Target>\\n\\n        <Combobox.Dropdown>\\n          <Combobox.Search\\n            value={search}\\n            onChange={(event) => setSearch(event.currentTarget.value)}\\n            placeholder=\\"Search groceries\\"\\n          />\\n          <Combobox.Options>\\n            {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n          </Combobox.Options>\\n        </Combobox.Dropdown>\\n      </Combobox>\\n\\n      <Box mt=\\"xs\\">\\n        <Text span size=\\"sm\\" c=\\"dimmed\\">\\n          Selected item:{\' \'}\\n        </Text>\\n\\n        <Text span size=\\"sm\\">\\n          {selectedItem || \'Nothing selected\'}\\n        </Text>\\n      </Box>\\n    </>\\n  );\\n}\\n"}]'),oO=JSON.parse('[{"fileName":"DropdownOptionsAnimation.tsx","language":"tsx","code":"\\nimport cx from \'clsx\';\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\nimport classes from \'./DropdownOptionsAnimation.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function DropdownOptionsAnimation() {\\n  const [animating, setAnimating] = useState(false);\\n\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      setAnimating(false);\\n    },\\n\\n    onDropdownOpen: () => setAnimating(true),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option\\n      value={item}\\n      key={item}\\n      className={cx({ [classes.animateOption]: animating })}\\n      style={{ animationDelay: `${index * 30}ms` }}\\n    >\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"DropdownOptionsAnimation.module.css","language":"css","code":"@keyframes option-animation {\\n  from {\\n    opacity: 0;\\n    transform: translateX(rem(-20px));\\n  }\\n\\n  to {\\n    opacity: 1;\\n    transform: translateX(0);\\n  }\\n}\\n\\n.animateOption {\\n  opacity: 0;\\n  animation: option-animation 200ms ease;\\n  animation-fill-mode: forwards;\\n}\\n"}]'),of=JSON.parse('[{"fileName":"SelectOptionOnHover.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectOptionOnHover() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option value={item} key={item} onMouseOver={() => combobox.selectOption(index)}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown onMouseLeave={() => combobox.resetSelectedOption()}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),oy=JSON.parse('[{"fileName":"SelectedStyles.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectedStyles.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectedStyles() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option\\n      value={item}\\n      key={item}\\n      className={classes.option}\\n      onMouseOver={() => combobox.selectOption(index)}\\n    >\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown onMouseLeave={() => combobox.resetSelectedOption()}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectedStyles.module.css","language":"css","code":".option {\\n  &[data-combobox-selected] {\\n    background-color: var(--mantine-color-red-9);\\n    color: var(--mantine-color-red-0);\\n    font-weight: 500;\\n  }\\n}\\n"}]'),oj=JSON.parse("[{\"fileName\":\"DropdownFooter.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, ScrollArea, Anchor, useCombobox, Text } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownFooter() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n        <Combobox.Footer>\\n          <Text fz=\\\"xs\\\" c=\\\"dimmed\\\">\\n            Search powered by{' '}\\n            <Anchor fz=\\\"xs\\\" href=\\\"https://mantine.dev\\\" target=\\\"_blank\\\">\\n              Mantine\\n            </Anchor>\\n          </Text>\\n        </Combobox.Footer>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oB=JSON.parse("[{\"fileName\":\"DropdownHeader.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, ScrollArea, useCombobox, Text } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownHeader() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item} disabled={item === '\uD83E\uDD55 Carrots'}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <Combobox.Header>\\n            <Text fz=\\\"xs\\\">Note: Carrots are not currently available</Text>\\n          </Combobox.Header>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),oF=JSON.parse('[{"fileName":"SelectedAnimation.tsx","language":"tsx","code":"\\nimport { Combobox, InputBase, Input, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectedAnimation.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectedAnimation() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} className={classes.option}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSelect={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectedAnimation.module.css","language":"css","code":".option {\\n  transition: transform 100ms ease, box-shadow 100ms ease;\\n\\n  &[data-combobox-selected] {\\n    font-weight: 500;\\n    transform: scale(1.1);\\n    box-shadow: var(--mantine-shadow-lg);\\n  }\\n}\\n"}]'),oE=JSON.parse("[{\"fileName\":\"AutocompleteClearable.tsx\",\"language\":\"tsx\",\"code\":\"\\nimport { Combobox, TextInput, CloseButton, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function AutocompleteClearable() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSelect={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n          rightSection={\\n            value !== '' && (\\n              <CloseButton\\n                size=\\\"sm\\\"\\n                onMouseDown={(event) => event.preventDefault()}\\n                onClick={() => setValue('')}\\n                aria-label=\\\"Clear value\\\"\\n              />\\n            )\\n          }\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let ok={BasicSelect:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=u.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:ot},SearchableSelect:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),[t,c]=(0,i.useState)(""),u=b.every(o=>o!==t),p=u?b.filter(o=>o.toLowerCase().includes(t.toLowerCase().trim())):b,m=p.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,onOptionSelect:n=>{e(n),c(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{rightSection:(0,r.jsx)(l.h.Chevron,{}),value:t,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),c(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),c(n||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:m.length>0?m:(0,r.jsx)(l.h.Empty,{children:"Nothing found"})})})]})},code:oi},BasicAutocomplete:{component:function(){let o=(0,s.K)(),[n,e]=(0,i.useState)(""),t=!m.some(o=>o===n),a=t?m.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):m,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})]})},code:or},AutocompleteLimit:{component:function(){let o=(0,s.K)(),[n,e]=(0,i.useState)(""),t=function(o,n,e){let t=[];for(let e=0;e<o.length&&7!==t.length;e+=1)o[e].toLowerCase().includes(n.trim().toLowerCase())&&t.push(o[e]);return t}(d,n,0),a=t.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:0===a.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):a})})]})},code:os},AsyncAutocomplete:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(!1),[t,a]=(0,i.useState)(null),[c,u]=(0,i.useState)(""),[m,b]=(0,i.useState)(!1),d=(0,i.useRef)(),C=o=>{var n,t;null===(n=d.current)||void 0===n||n.abort(),d.current=new AbortController,e(!0),(t=d.current.signal,new Promise((n,e)=>{t.addEventListener("abort",()=>{e(Error("Request aborted"))}),setTimeout(()=>{n(x.filter(n=>n.toLowerCase().includes(o.toLowerCase())).slice(0,5))},1e3*Math.random())})).then(o=>{a(o),e(!1),b(0===o.length),d.current=void 0}).catch(()=>{})},D=(t||[]).map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{u(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Search groceries",value:c,onChange:n=>{u(n.currentTarget.value),C(n.currentTarget.value),o.resetSelectedOption(),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>{o.openDropdown(),null===t&&C(c)},onBlur:()=>o.closeDropdown(),rightSection:n&&(0,r.jsx)(h.a,{size:18})})}),(0,r.jsx)(l.h.Dropdown,{hidden:null===t,children:(0,r.jsxs)(l.h.Options,{children:[D,m&&(0,r.jsx)(l.h.Empty,{children:"No results found"})]})})]})},code:ol},AutocompleteHighlight:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!D.some(o=>o===n),a=t?D.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):D,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:(0,r.jsx)(C.y,{highlight:n,size:"sm",children:o})},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.updateSelectedOptionIndex(),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})]})},code:oa},SelectActive:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:n=>{"keyboard"===n?o.selectActiveOption():o.updateSelectedOptionIndex("active")}}),[n,e]=(0,i.useState)("\uD83E\uDD66 Broccoli"),t=v.map(o=>(0,r.jsx)(l.h.Option,{value:o,active:o===n,children:(0,r.jsxs)(g.Z,{gap:"xs",children:[o===n&&(0,r.jsx)(w.n,{size:12}),(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(l.h,{store:o,resetSelectionOnOptionHover:!0,onOptionSelect:n=>{e(n),o.updateSelectedOptionIndex("active")},children:[(0,r.jsx)(l.h.Target,{targetType:"button",children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:oc},SelectOptionComponent:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=O.find(o=>o.value===n),u=O.map(o=>(0,r.jsx)(l.h.Option,{value:o.value,children:(0,r.jsx)(f,{...o})},o.value));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",multiline:!0,children:t?(0,r.jsx)(f,{...t}):(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:u})})]})},code:ou},SelectLimit:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),[t,c]=(0,i.useState)(""),u=function(o,n,e){let t=[];for(let e=0;e<o.length&&7!==t.length;e+=1)o[e].toLowerCase().includes(n.trim().toLowerCase())&&t.push(o[e]);return t}(y,t,0),p=u.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,onOptionSelect:n=>{e(n),c(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{rightSection:(0,r.jsx)(l.h.Chevron,{}),value:t,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),c(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),c(n||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:p.length>0?p:(0,r.jsx)(l.h.Empty,{children:"Nothing found"})})})]})},code:op},SelectAsync:{component:function(){let[o,n]=(0,i.useState)(null),[e,t]=(0,i.useState)(!1),[u,p]=(0,i.useState)([]),m=(0,s.K)({onDropdownClose:()=>m.resetSelectedOption(),onDropdownOpen:()=>{0!==u.length||e||(t(!0),new Promise(o=>{setTimeout(()=>o(j),2e3)}).then(o=>{p(o),t(!1),m.resetSelectedOption()}))}}),b=u.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:m,withinPortal:!1,onOptionSelect:o=>{n(o),m.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:e?(0,r.jsx)(h.a,{size:18}):(0,r.jsx)(l.h.Chevron,{}),onClick:()=>m.toggleDropdown(),rightSectionPointerEvents:"none",children:o||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:e?(0,r.jsx)(l.h.Empty,{children:"Loading...."}):b})})]})},code:om},AutocompleteSelectFirstOption:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!B.some(o=>o===n),a=t?B.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):B,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,i.useEffect)(()=>{o.selectFirstOption()},[n]),(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})]})},code:ob},SelectClearable:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=E.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:null!==n?(0,r.jsx)(F.P,{size:"sm",onMouseDown:o=>o.preventDefault(),onClick:()=>e(null),"aria-label":"Clear value"}):(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:null===n?"none":"all",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:od},DropdownScroll:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!k.some(o=>o===n),a=t?k.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):k,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{mah:200,style:{overflowY:"auto"},children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})]})},code:oh},DropdownScrollArea:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!A.some(o=>o===n),a=t?A.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):A,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:(0,r.jsx)(P.x.Autosize,{mah:200,type:"scroll",children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})})]})},code:ox},AutocompleteDynamic:{component:function(){let o=(0,s.K)(),[n,e]=(0,i.useState)(""),t=["gmail.com","outlook.com","mantine.dev"].map(o=>(0,r.jsx)(l.h.Option,{value:"".concat(n,"@").concat(o),children:"".concat(n,"@").concat(o)},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Your email",placeholder:"Your email",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{hidden:0===n.trim().length||n.includes("@"),children:(0,r.jsx)(l.h.Options,{children:0===t.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):t})})]})},code:oC},DropdownAnimation:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=T.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,transitionProps:{duration:200,transition:"pop"},onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:oD},DropdownPositionStyles:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=_.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,offset:0,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",classNames:{input:N().input},children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{className:N().dropdown,children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:og},SelectDropdownSearch:{component:function(){let[o,n]=(0,i.useState)(""),e=(0,s.K)({onDropdownClose:()=>{e.resetSelectedOption(),e.focusTarget(),n("")},onDropdownOpen:()=>{e.focusSearchInput()}}),[t,u]=(0,i.useState)(null),p=L.filter(n=>n.toLowerCase().includes(o.toLowerCase().trim())).map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{store:e,withinPortal:!1,onOptionSelect:o=>{u(o),e.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>e.toggleDropdown(),rightSectionPointerEvents:"none",children:t||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsxs)(l.h.Dropdown,{children:[(0,r.jsx)(l.h.Search,{value:o,onChange:o=>n(o.currentTarget.value),placeholder:"Search groceries"}),(0,r.jsx)(l.h.Options,{children:p.length>0?p:(0,r.jsx)(l.h.Empty,{children:"Nothing found"})})]})]})},code:ow},BasicButton:{component:function(){let[o,n]=(0,i.useState)(null),e=(0,s.K)({onDropdownClose:()=>e.resetSelectedOption()}),t=M.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(l.h,{store:e,width:250,position:"bottom-start",withArrow:!0,onOptionSelect:o=>{n(o),e.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(V.z,{onClick:()=>e.toggleDropdown(),children:"Pick item"})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]}),(0,r.jsxs)(z.x,{mt:"xs",children:[(0,r.jsxs)(S.x,{span:!0,size:"sm",c:"dimmed",children:["Selected item:"," "]}),(0,r.jsx)(S.x,{span:!0,size:"sm",children:o||"Nothing selected"})]})]})},code:ov},ButtonSearch:{component:function(){let[o,n]=(0,i.useState)(""),[e,t]=(0,i.useState)(null),a=(0,s.K)({onDropdownClose:()=>{a.resetSelectedOption(),a.focusTarget(),n("")},onDropdownOpen:()=>{a.focusSearchInput()}}),c=G.filter(n=>n.toLowerCase().includes(o.toLowerCase().trim())).map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(l.h,{store:a,width:250,position:"bottom-start",withArrow:!0,onOptionSelect:o=>{t(o),a.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{withAriaAttributes:!1,children:(0,r.jsx)(V.z,{onClick:()=>a.toggleDropdown(),children:"Pick item"})}),(0,r.jsxs)(l.h.Dropdown,{children:[(0,r.jsx)(l.h.Search,{value:o,onChange:o=>n(o.currentTarget.value),placeholder:"Search groceries"}),(0,r.jsx)(l.h.Options,{children:c.length>0?c:(0,r.jsx)(l.h.Empty,{children:"Nothing found"})})]})]}),(0,r.jsxs)(z.x,{mt:"xs",children:[(0,r.jsxs)(S.x,{span:!0,size:"sm",c:"dimmed",children:["Selected item:"," "]}),(0,r.jsx)(S.x,{span:!0,size:"sm",children:e||"Nothing selected"})]})]})},code:oS},DropdownOptionsAnimation:{component:function(){let[o,n]=(0,i.useState)(!1),e=(0,s.K)({onDropdownClose:()=>{e.resetSelectedOption(),n(!1)},onDropdownOpen:()=>n(!0)}),[t,u]=(0,i.useState)(null),p=R.map((n,e)=>(0,r.jsx)(l.h.Option,{value:n,className:(0,K.Z)({[J().animateOption]:o}),style:{animationDelay:"".concat(30*e,"ms")},children:n},n));return(0,r.jsxs)(l.h,{store:e,withinPortal:!1,onOptionSelect:o=>{u(o),e.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>e.toggleDropdown(),rightSectionPointerEvents:"none",children:t||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:p})})]})},code:oO},SelectOptionOnHover:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=q.map((n,e)=>(0,r.jsx)(l.h.Option,{value:n,onMouseOver:()=>o.selectOption(e),children:n},n));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{onMouseLeave:()=>o.resetSelectedOption(),children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:of},SelectedStyles:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=Y.map((n,e)=>(0,r.jsx)(l.h.Option,{value:n,className:Z().option,onMouseOver:()=>o.selectOption(e),children:n},n));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{onMouseLeave:()=>o.resetSelectedOption(),children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:oy},DropdownFooter:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!X.some(o=>o===n),a=t?X.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):X,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsxs)(l.h.Dropdown,{children:[(0,r.jsx)(l.h.Options,{children:(0,r.jsx)(P.x.Autosize,{mah:200,type:"scroll",children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})}),(0,r.jsx)(l.h.Footer,{children:(0,r.jsxs)(S.x,{fz:"xs",c:"dimmed",children:["Search powered by"," ",(0,r.jsx)($.e,{fz:"xs",href:"https://mantine.dev",target:"_blank",children:"Mantine"})]})})]})]})},code:oj},DropdownHeader:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(""),t=!W.some(o=>o===n),a=t?W.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):W,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,disabled:"\uD83E\uDD55 Carrots"===o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsxs)(l.h.Options,{children:[(0,r.jsx)(l.h.Header,{children:(0,r.jsx)(S.x,{fz:"xs",children:"Note: Carrots are not currently available"})}),(0,r.jsx)(P.x.Autosize,{mah:200,type:"scroll",children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})]})})]})},code:oB},SelectedAnimation:{component:function(){let o=(0,s.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,i.useState)(null),t=on.map(o=>(0,r.jsx)(l.h.Option,{value:o,className:oo().option,children:o},o));return(0,r.jsxs)(l.h,{store:o,withinPortal:!1,onOptionSelect:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(a.M,{component:"button",pointer:!0,rightSection:(0,r.jsx)(l.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(c.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:t})})]})},code:oF},AutocompleteClearable:{component:function(){let o=(0,s.K)(),[n,e]=(0,i.useState)(""),t=!oe.some(o=>o===n),a=t?oe.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim())):oe,c=a.map(o=>(0,r.jsx)(l.h.Option,{value:o,children:o},o));return(0,r.jsxs)(l.h,{onOptionSelect:n=>{e(n),o.closeDropdown()},store:o,children:[(0,r.jsx)(l.h.Target,{children:(0,r.jsx)(p.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown(),rightSection:""!==n&&(0,r.jsx)(F.P,{size:"sm",onMouseDown:o=>o.preventDefault(),onClick:()=>e(""),"aria-label":"Clear value"})})}),(0,r.jsx)(l.h.Dropdown,{children:(0,r.jsx)(l.h.Options,{children:0===c.length?(0,r.jsx)(l.h.Empty,{children:"Nothing found"}):c})})]})},code:oE}};var oP=e(9008),oA=e.n(oP),oT=e(82411),oI=e(51772),oN=e(79153),o_=e(41664),oL=e.n(o_),oV=e(11163),oz=e(78901),oM=e(90395),oG=e(91500),oK=e(21757),oH=e.n(oK);function oJ(o){let{data:n,searchQuery:e}=o,t=(0,oV.useRouter)(),[s,{toggle:l,open:a}]=(0,oz.q)(!0);if((0,i.useEffect)(a,[e]),0===n.items.length)return null;let c=n.items.map(o=>(0,r.jsxs)(oL(),{href:"/combobox?e=".concat(o.id),className:oH().link,"data-navbar-link-active":t.query.e===o.id||void 0,children:[(0,r.jsx)(C.y,{className:oH().linkTitle,highlight:e,children:o.name}),(0,r.jsx)(C.y,{className:oH().linkDescription,highlight:e,children:o.description})]},o.id));return(0,r.jsxs)(z.x,{className:oH().group,mod:{opened:s},children:[(0,r.jsxs)(oM.k,{className:oH().header,onClick:l,children:[(0,r.jsx)(oG.Z,{className:oH().chevron,"data-collapsed":!s||void 0}),(0,r.jsx)(S.x,{className:oH().title,children:n.group.replace("-"," ")})]}),s&&c]})}var oR=e(11088),oq=e.n(oR);function oQ(o){let{opened:n}=o,[e,s]=(0,i.useState)(""),l=(0,i.useRef)(null),a=e.toLowerCase().split(" ").filter(o=>o.trim().length>0),c=t.filter(o=>{let n=o.name.toLowerCase().split(" ").filter(o=>o.trim().length>0),e=o.description.toLowerCase().split(" ").filter(o=>o.trim().length>0);return a.every(t=>n.some(o=>o.includes(t))||e.some(o=>o.includes(t))||o.type.includes(t))}),u=function(o){let n={select:[],autocomplete:[],multiselect:[],dropdown:[],button:[],animations:[]};return o.forEach(o=>{n[o.type].push(o)}),[{group:"Select",items:n.select},{group:"Autocomplete",items:n.autocomplete},{group:"Multiselect",items:n.multiselect},{group:"Button",items:n.button},{group:"Dropdown",items:n.dropdown},{group:"Animations",items:n.animations}]}(c),m=u.map(o=>(0,r.jsx)(oJ,{data:o,searchQuery:a},o.group));return(0,oI.A)([["mod + shift + k",()=>{var o;return null===(o=l.current)||void 0===o?void 0:o.focus()}]],[]),(0,i.useEffect)(()=>{setTimeout(()=>{var o;null===(o=document.querySelector("[data-navbar-link-active]"))||void 0===o||o.scrollIntoView({block:"center",behavior:"instant"})},500)},[]),(0,r.jsxs)("nav",{className:oq().navbar,"data-hidden":!n||void 0,children:[(0,r.jsx)(p.o,{placeholder:"Ctrl + Shift + K to search",classNames:{root:oq().search,input:oq().searchInput},leftSection:(0,r.jsx)(oN.Z,{className:oq().searchIcon,stroke:1.5}),radius:"md",size:"md",value:e,onChange:o=>s(o.currentTarget.value),ref:l}),(0,r.jsxs)(P.x,{className:oq().scroll,type:"scroll",scrollbarSize:6,children:[m,(0,r.jsx)(S.x,{className:oq().empty,children:"Nothing found..."})]})]})}var oZ=e(76888),oY=e.n(oZ);function o$(o){let{children:n}=o,[e,t]=(0,i.useState)(!1);return(0,r.jsx)("div",{className:oY().root,children:(0,r.jsxs)(oT.N,{withNavbar:!1,navbarOpened:e,onNavbarOpenedChange:t,children:[(0,r.jsx)(oQ,{opened:e}),(0,r.jsx)("main",{className:oY().main,children:n})]})})}var oX=e(82827),oW=e(23733),oU=e(82368),o0=e(17192),o3=e(51787),o8=e.n(o3);function o5(){let o=(0,oV.useRouter)(),n=o.query.e,e=ok[n],i=t.find(o=>o.id===n);return e&&i?(0,r.jsxs)("div",{className:o8().root,children:[(0,r.jsxs)("div",{className:(0,K.Z)(o8().preview,oX.Z.classNames.zeroRight),children:[(0,r.jsxs)("div",{className:o8().header,children:[(0,r.jsxs)("div",{className:o8().headerBody,children:[(0,r.jsx)(S.x,{className:o8().title,children:i.name}),(0,r.jsx)(S.x,{className:o8().description,children:i.fullDescription||i.description})]}),(0,r.jsx)(oW.C,{variant:"light",children:i.type})]}),(0,r.jsx)("div",{className:o8().inner,children:(0,r.jsx)("div",{className:o8().wrapper,children:(0,r.jsx)(e.component,{})})})]}),(0,r.jsx)("div",{className:o8().code,children:(0,r.jsx)(o0.Q,{code:e.code,getFileIcon:oU.L})})]}):null}var o6=function(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(oA(),{children:(0,r.jsx)("title",{children:"Combobox examples | Mantine"})}),(0,r.jsx)(o$,{children:(0,r.jsx)(o5,{})})]})}},51787:function(o){o.exports={root:"ComboboxDemo_root__VHEg4",preview:"ComboboxDemo_preview__o_GyL",header:"ComboboxDemo_header__IRTkn",headerBody:"ComboboxDemo_headerBody__2MNg8",title:"ComboboxDemo_title__ESRRs",description:"ComboboxDemo_description__Yzga6",inner:"ComboboxDemo_inner__X5EZg",wrapper:"ComboboxDemo_wrapper__fLzsr",code:"ComboboxDemo_code__ihQCm"}},21757:function(o){o.exports={group:"ComboboxLinksGroup_group___3DBD",header:"ComboboxLinksGroup_header__NPwCf",chevron:"ComboboxLinksGroup_chevron__OCkV8",title:"ComboboxLinksGroup_title__ct5WH",link:"ComboboxLinksGroup_link__V0x6U",linkTitle:"ComboboxLinksGroup_linkTitle__Xz2H7",linkDescription:"ComboboxLinksGroup_linkDescription__7H8lj"}},11088:function(o){o.exports={navbar:"ComboboxNavbar_navbar__dBZ3C",scroll:"ComboboxNavbar_scroll__nhvxA",search:"ComboboxNavbar_search__i7Dsw",searchInput:"ComboboxNavbar_searchInput__r17UY",searchIcon:"ComboboxNavbar_searchIcon__RxkMY",item:"ComboboxNavbar_item__Byi_P",itemName:"ComboboxNavbar_itemName__MW_ui",itemDescription:"ComboboxNavbar_itemDescription__0hDxB",empty:"ComboboxNavbar_empty__GLKO4"}},76888:function(o){o.exports={root:"ComboboxShell_root__2qhtZ",main:"ComboboxShell_main__7MsRS"}},35056:function(o){o.exports={animateOption:"DropdownOptionsAnimation_animateOption__gfV8k","option-animation":"DropdownOptionsAnimation_option-animation__GGc2_"}},22465:function(o){o.exports={dropdown:"DropdownPositionStyles_dropdown__HzqdQ",input:"DropdownPositionStyles_input__OlQF1"}},95296:function(o){o.exports={option:"SelectedAnimation_option__RJBba"}},19416:function(o){o.exports={option:"SelectedStyles_option__zDgi1"}},23733:function(o,n,e){"use strict";e.d(n,{C:function(){return f}});var t=e(67294),r={root:"mantine-WM8AqtG","root--dot":"mantine-d3u1-wu",label:"mantine-LN56t-P",section:"mantine-cbpGUul"},i=e(70656),s=e(35577),l=e(25637),a=e(94873),c=e(95553),u=e(71350),p=e(94975),m=Object.defineProperty,b=Object.defineProperties,d=Object.getOwnPropertyDescriptors,h=Object.getOwnPropertySymbols,x=Object.prototype.hasOwnProperty,C=Object.prototype.propertyIsEnumerable,D=(o,n,e)=>n in o?m(o,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[n]=e,g=(o,n)=>{for(var e in n||(n={}))x.call(n,e)&&D(o,e,n[e]);if(h)for(var e of h(n))C.call(n,e)&&D(o,e,n[e]);return o},w=(o,n)=>b(o,d(n)),v=(o,n)=>{var e={};for(var t in o)x.call(o,t)&&0>n.indexOf(t)&&(e[t]=o[t]);if(null!=o&&h)for(var t of h(o))0>n.indexOf(t)&&C.call(o,t)&&(e[t]=o[t]);return e};let S={size:"md",radius:"xl",variant:"filled"},O=(0,c.Z)((o,{radius:n,color:e,gradient:t,variant:r,size:i})=>{let s=o.variantColorResolver({color:e||o.primaryColor,theme:o,gradient:t,variant:r});return{root:{"--badge-height":(0,u.ap)(i,"badge-height"),"--badge-padding-x":(0,u.ap)(i,"badge-padding-x"),"--badge-fz":(0,u.ap)(i,"badge-fz"),"--badge-radius":(0,u.H5)(n),"--badge-bg":s.background,"--badge-color":s.color,"--badge-bd":s.border,"--badge-dot-color":"dot"===r?(0,p.p)(e,o):void 0}}}),f=(0,i.b)((o,n)=>{let e=(0,s.w)("Badge",S,o),{classNames:i,className:c,style:u,styles:p,unstyled:m,vars:b,radius:d,color:h,gradient:x,leftSection:C,rightSection:D,children:f,variant:y,fullWidth:j}=e,B=v(e,["classNames","className","style","styles","unstyled","vars","radius","color","gradient","leftSection","rightSection","children","variant","fullWidth"]),F=(0,l.y)({name:"Badge",props:e,classes:r,className:c,style:u,classNames:i,styles:p,unstyled:m,vars:b,varsResolver:O});return t.createElement(a.x,g(w(g({variant:y,mod:{block:j}},F("root",{variant:y})),{ref:n}),B),C&&t.createElement("span",w(g({},F("section")),{"data-position":"left"}),C),t.createElement("span",g({},F("label")),f),D&&t.createElement("span",w(g({},F("section")),{"data-position":"right"}),D))});f.classes=r,f.displayName="@mantine/core/Badge"},78901:function(o,n,e){"use strict";e.d(n,{q:function(){return r}});var t=e(67294);function r(o=!1,n){let{onOpen:e,onClose:r}=n||{},[i,s]=(0,t.useState)(o),l=(0,t.useCallback)(()=>{s(o=>o||(null==e||e(),!0))},[e]),a=(0,t.useCallback)(()=>{s(o=>o?(null==r||r(),!1):o)},[r]),c=(0,t.useCallback)(()=>{i?a():l()},[a,l,i]);return[i,{open:l,close:a,toggle:c}]}}},function(o){o.O(0,[2411,8749,9774,2888,179],function(){return o(o.s=20799)}),_N_E=o.O()}]);